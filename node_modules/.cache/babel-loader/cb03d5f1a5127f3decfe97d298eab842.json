{"ast":null,"code":"var _jsxFileName = \"D:\\\\goit-react-hw-02-phonebook\\\\src\\\\components\\\\App.jsx\";\nimport React, { Component } from \"react\";\nimport ContactForm from \"./phoneBook/ContactForm\";\nimport Filter from \"./phoneBook/Filter\";\nimport ContactList from \"./phoneBook/ContactList\";\nimport \"./phoneBook/phonebook.css\";\nimport { nanoid } from 'nanoid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class App extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      contacts: [{\n        id: 'id-1',\n        name: 'Rosie Simpson',\n        number: '459-12-56'\n      }, {\n        id: 'id-2',\n        name: 'Hermione Kline',\n        number: '443-89-12'\n      }, {\n        id: 'id-3',\n        name: 'Eden Clements',\n        number: '645-17-79'\n      }, {\n        id: 'id-4',\n        name: 'Annie Copeland',\n        number: '227-91-26'\n      }],\n      filter: '',\n      name: '',\n      number: ''\n    };\n\n    this.submitForm = evt => {\n      evt.preventDefault();\n      const form = evt.currentTarget;\n      const name = form.elements.name.value;\n      const number = form.elements.number.value;\n      const id = nanoid();\n      console.log(name);\n      const isNameExists = this.state.contacts.some(contact => contact.name.toLowerCase() === name.toLowerCase());\n\n      if (isNameExists) {\n        alert(\"Contact with this name already exists in the phonebook.\");\n        return;\n      }\n\n      this.setState({\n        id: id,\n        name: name,\n        number: number\n      }, () => {\n        const newCont = {\n          id,\n          name,\n          number\n        };\n        this.setState({\n          contacts: [...this.state.contacts, newCont]\n        }, () => {\n          console.log(this.state.contacts);\n        });\n      });\n      form.reset();\n    };\n\n    this.deleteContact = id => {\n      const updatedContacts = this.state.contacts.filter(contact => contact.id !== id);\n      this.setState({\n        contacts: updatedContacts\n      });\n    };\n\n    this.createContact = () => {\n      const filteredContacts = this.state.contacts.filter(contact => contact.name.toLowerCase().includes(this.state.filter.toLowerCase()));\n      return filteredContacts.map(contact => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [contact.name, \": \", contact.number, /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"delete\",\n          onClick: () => this.deleteContact(contact.id),\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 9\n        }, this)]\n      }, contact.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 7\n      }, this));\n    };\n\n    this.handleFilterChange = evt => {\n      const filterValue = evt.target.value;\n      this.setState({\n        filter: filterValue\n      });\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"first-wrap\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Phonebook\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: this.submitForm,\n          className: \"form\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"name\",\n            children: \"Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"name\",\n            className: \"input-name\",\n            pattern: \"^[a-zA-Z\\u0430-\\u044F\\u0410-\\u042F]+(([' -][a-zA-Z\\u0430-\\u044F\\u0410-\\u042F ])?[a-zA-Z\\u0430-\\u044F\\u0410-\\u042F]*)*$\",\n            title: \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"number\",\n            children: \"Phone Number\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"tel\",\n            name: \"number\",\n            pattern: \"\\\\+?\\\\d{1,4}?[-.\\\\s]?\\\\(?\\\\d{1,3}?\\\\)?[-.\\\\s]?\\\\d{1,4}[-.\\\\s]?\\\\d{1,4}[-.\\\\s]?\\\\d{1,9}\",\n            title: \"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"submit\",\n            children: \"Add contact\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"second-wrap\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Contacts\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"filter\",\n          children: \"Find contacts by name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"filter\",\n          placeholder: \"Search by name\",\n          value: this.state.filter,\n          onChange: this.handleFilterChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: this.createContact()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["D:/goit-react-hw-02-phonebook/src/components/App.jsx"],"names":["React","Component","ContactForm","Filter","ContactList","nanoid","App","state","contacts","id","name","number","filter","submitForm","evt","preventDefault","form","currentTarget","elements","value","console","log","isNameExists","some","contact","toLowerCase","alert","setState","newCont","reset","deleteContact","updatedContacts","createContact","filteredContacts","includes","map","handleFilterChange","filterValue","target","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport ContactForm from \"./phoneBook/ContactForm\";\r\nimport Filter from \"./phoneBook/Filter\";\r\nimport ContactList from \"./phoneBook/ContactList\";\r\nimport \"./phoneBook/phonebook.css\";\r\nimport { nanoid } from 'nanoid';\r\n\r\n\r\nexport class App extends Component{\r\n  state = {\r\n    contacts: [\r\n      {id: 'id-1', name: 'Rosie Simpson', number: '459-12-56'},\r\n      {id: 'id-2', name: 'Hermione Kline', number: '443-89-12'},\r\n      {id: 'id-3', name: 'Eden Clements', number: '645-17-79'},\r\n      {id: 'id-4', name: 'Annie Copeland', number: '227-91-26'},\r\n    ],\r\n    filter: '',\r\n    name: '',\r\n    number: '',\r\n  }\r\n\r\n  submitForm = evt => {\r\n    evt.preventDefault();\r\n    const form = evt.currentTarget;\r\n    const name = form.elements.name.value;\r\n    const number = form.elements.number.value;\r\n    const id = nanoid();\r\n    console.log(name);\r\n\r\n    const isNameExists = this.state.contacts.some(\r\n      (contact) => contact.name.toLowerCase() === name.toLowerCase()\r\n    );\r\n    if (isNameExists) {\r\n      alert(\"Contact with this name already exists in the phonebook.\");\r\n      return;\r\n    }\r\n\r\n    this.setState({\r\n      id: id,\r\n      name: name,\r\n      number: number,\r\n    }, () => {\r\n      const newCont = {id, name, number};\r\n      this.setState({\r\n        contacts: [...this.state.contacts, newCont],\r\n      }, () => {\r\n        console.log(this.state.contacts);\r\n      });\r\n    });\r\n    form.reset();\r\n  }\r\n  \r\n  deleteContact = (id) => {\r\n    const updatedContacts = this.state.contacts.filter(\r\n      (contact) => contact.id !== id\r\n    );\r\n\r\n    this.setState({\r\n      contacts: updatedContacts,\r\n    });\r\n  }\r\n  \r\n  createContact = () => {\r\n    const filteredContacts = this.state.contacts.filter((contact) =>\r\n      contact.name.toLowerCase().includes(this.state.filter.toLowerCase())\r\n    );\r\n\r\n    return filteredContacts.map((contact) => (\r\n      <li key={contact.id}>\r\n        {contact.name}: {contact.number}\r\n        <button\r\n          className=\"delete\"\r\n          onClick={() => this.deleteContact(contact.id)}\r\n        >\r\n          Delete\r\n        </button>\r\n      </li>\r\n    ));\r\n  };\r\n\r\n  handleFilterChange = evt => {\r\n    const filterValue = evt.target.value;\r\n    this.setState({\r\n      filter: filterValue\r\n    });\r\n  };\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div className=\"main\">\r\n        <div className=\"first-wrap\">\r\n          <h1>Phonebook</h1>\r\n          <form onSubmit={this.submitForm} className=\"form\">\r\n            <label htmlFor=\"name\">Name</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"name\"\r\n              className=\"input-name\"\r\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\r\n              required\r\n            />\r\n            <label htmlFor=\"number\">Phone Number</label>\r\n            <input\r\n              type=\"tel\"\r\n              name=\"number\"\r\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n              title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\r\n              required\r\n            />\r\n            <button type=\"submit\" className=\"submit\">Add contact</button>\r\n          </form>\r\n        </div>\r\n\r\n        <div className=\"second-wrap\">\r\n          <h2>Contacts</h2>\r\n\r\n          <label htmlFor=\"filter\">Find contacts by name</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"filter\"\r\n            placeholder=\"Search by name\"\r\n            value={this.state.filter}\r\n            onChange={this.handleFilterChange}\r\n          />\r\n\r\n          <ul>\r\n            {this.createContact()}\r\n          </ul>\r\n        </div>\r\n      </div>\r\n\r\n      \r\n    )\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}